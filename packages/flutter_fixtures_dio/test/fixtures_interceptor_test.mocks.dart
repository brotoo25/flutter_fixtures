// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_fixtures_dio/test/fixtures_interceptor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/src/dio_exception.dart' as _i11;
import 'package:dio/src/dio_mixin.dart' as _i2;
import 'package:dio/src/options.dart' as _i9;
import 'package:dio/src/response.dart' as _i10;
import 'package:flutter_fixtures_core/src/data_query.dart' as _i3;
import 'package:flutter_fixtures_core/src/data_selector_type.dart' as _i8;
import 'package:flutter_fixtures_core/src/data_selector_view.dart' as _i7;
import 'package:flutter_fixtures_core/src/fixture_collection.dart' as _i5;
import 'package:flutter_fixtures_core/src/fixture_document.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInterceptorState_0<T> extends _i1.SmartFake
    implements _i2.InterceptorState<T> {
  _FakeInterceptorState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DataQuery].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataQuery<Input, Output> extends _i1.Mock
    implements _i3.DataQuery<Input, Output> {
  MockDataQuery() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Output?> find(Input? input) => (super.noSuchMethod(
        Invocation.method(
          #find,
          [input],
        ),
        returnValue: _i4.Future<Output?>.value(),
      ) as _i4.Future<Output?>);

  @override
  _i4.Future<_i5.FixtureCollection?> parse(Output? source) =>
      (super.noSuchMethod(
        Invocation.method(
          #parse,
          [source],
        ),
        returnValue: _i4.Future<_i5.FixtureCollection?>.value(),
      ) as _i4.Future<_i5.FixtureCollection?>);

  @override
  _i4.Future<Output?> data(_i6.FixtureDocument? document) =>
      (super.noSuchMethod(
        Invocation.method(
          #data,
          [document],
        ),
        returnValue: _i4.Future<Output?>.value(),
      ) as _i4.Future<Output?>);

  @override
  _i4.Future<_i6.FixtureDocument?> select(
    _i5.FixtureCollection? fixture,
    _i7.DataSelectorView? view,
    _i8.DataSelectorType? selector,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #select,
          [
            fixture,
            view,
            selector,
          ],
        ),
        returnValue: _i4.Future<_i6.FixtureDocument?>.value(),
      ) as _i4.Future<_i6.FixtureDocument?>);
}

/// A class which mocks [DataSelectorView].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSelectorView extends _i1.Mock implements _i7.DataSelectorView {
  MockDataSelectorView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.FixtureDocument?> pick(_i5.FixtureCollection? fixture) =>
      (super.noSuchMethod(
        Invocation.method(
          #pick,
          [fixture],
        ),
        returnValue: _i4.Future<_i6.FixtureDocument?>.value(),
      ) as _i4.Future<_i6.FixtureDocument?>);
}

/// A class which mocks [RequestInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestInterceptorHandler extends _i1.Mock
    implements _i2.RequestInterceptorHandler {
  MockRequestInterceptorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.InterceptorState<dynamic>> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i4.Future<_i2.InterceptorState<dynamic>>.value(
            _FakeInterceptorState_0<dynamic>(
          this,
          Invocation.getter(#future),
        )),
      ) as _i4.Future<_i2.InterceptorState<dynamic>>);

  @override
  bool get isCompleted => (super.noSuchMethod(
        Invocation.getter(#isCompleted),
        returnValue: false,
      ) as bool);

  @override
  void next(_i9.RequestOptions? requestOptions) => super.noSuchMethod(
        Invocation.method(
          #next,
          [requestOptions],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resolve(
    _i10.Response<dynamic>? response, [
    bool? callFollowingResponseInterceptor = false,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #resolve,
          [
            response,
            callFollowingResponseInterceptor,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reject(
    _i11.DioException? error, [
    bool? callFollowingErrorInterceptor = false,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #reject,
          [
            error,
            callFollowingErrorInterceptor,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
