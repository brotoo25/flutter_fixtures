name: Auto Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release all packages regardless of version changes'
        required: false
        default: false
        type: boolean

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      core-changed: ${{ steps.changes.outputs.core-changed }}
      dio-changed: ${{ steps.changes.outputs.dio-changed }}
      ui-changed: ${{ steps.changes.outputs.ui-changed }}
      main-changed: ${{ steps.changes.outputs.main-changed }}
      core-version: ${{ steps.versions.outputs.core-version }}
      dio-version: ${{ steps.versions.outputs.dio-version }}
      ui-version: ${{ steps.versions.outputs.ui-version }}
      main-version: ${{ steps.versions.outputs.main-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history to compare versions

      - name: Get current versions
        id: versions
        run: |
          echo "core-version=$(grep '^version:' packages/flutter_fixtures_core/pubspec.yaml | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "dio-version=$(grep '^version:' packages/flutter_fixtures_dio/pubspec.yaml | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "ui-version=$(grep '^version:' packages/flutter_fixtures_ui/pubspec.yaml | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          echo "main-version=$(grep '^version:' packages/flutter_fixtures/pubspec.yaml | cut -d' ' -f2)" >> $GITHUB_OUTPUT

      - name: Check for version changes
        id: changes
        run: |
          # Function to check if version changed
          check_version_change() {
            local package_path=$1
            local current_version=$2
            local package_name=$3
            
            # Get the version from the previous commit
            local prev_version=$(git show HEAD~1:${package_path}/pubspec.yaml | grep '^version:' | cut -d' ' -f2 || echo "")
            
            echo "Package: $package_name"
            echo "Previous version: $prev_version"
            echo "Current version: $current_version"
            
            # Check if this version tag already exists
            local tag_name="${package_name}-v${current_version}"
            if git tag -l | grep -q "^${tag_name}$"; then
              echo "Tag $tag_name already exists, skipping"
              echo "false"
            elif [[ "$prev_version" != "$current_version" ]] || [[ "${{ github.event.inputs.force_release }}" == "true" ]]; then
              echo "Version changed or force release requested"
              echo "true"
            else
              echo "No version change"
              echo "false"
            fi
          }
          
          # Check each package
          core_changed=$(check_version_change "packages/flutter_fixtures_core" "${{ steps.versions.outputs.core-version }}" "flutter_fixtures_core")
          dio_changed=$(check_version_change "packages/flutter_fixtures_dio" "${{ steps.versions.outputs.dio-version }}" "flutter_fixtures_dio")
          ui_changed=$(check_version_change "packages/flutter_fixtures_ui" "${{ steps.versions.outputs.ui-version }}" "flutter_fixtures_ui")
          main_changed=$(check_version_change "packages/flutter_fixtures" "${{ steps.versions.outputs.main-version }}" "flutter_fixtures")
          
          echo "core-changed=$core_changed" >> $GITHUB_OUTPUT
          echo "dio-changed=$dio_changed" >> $GITHUB_OUTPUT
          echo "ui-changed=$ui_changed" >> $GITHUB_OUTPUT
          echo "main-changed=$main_changed" >> $GITHUB_OUTPUT

  create-tags:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.core-changed == 'true' ||
      needs.detect-changes.outputs.dio-changed == 'true' ||
      needs.detect-changes.outputs.ui-changed == 'true' ||
      needs.detect-changes.outputs.main-changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create tags for changed packages
        run: |
          # Create tags for packages that have version changes
          if [[ "${{ needs.detect-changes.outputs.core-changed }}" == "true" ]]; then
            tag="flutter_fixtures_core-v${{ needs.detect-changes.outputs.core-version }}"
            echo "Creating tag: $tag"
            git tag "$tag"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.dio-changed }}" == "true" ]]; then
            tag="flutter_fixtures_dio-v${{ needs.detect-changes.outputs.dio-version }}"
            echo "Creating tag: $tag"
            git tag "$tag"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.ui-changed }}" == "true" ]]; then
            tag="flutter_fixtures_ui-v${{ needs.detect-changes.outputs.ui-version }}"
            echo "Creating tag: $tag"
            git tag "$tag"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.main-changed }}" == "true" ]]; then
            tag="flutter_fixtures-v${{ needs.detect-changes.outputs.main-version }}"
            echo "Creating tag: $tag"
            git tag "$tag"
          fi

      - name: Push tags
        run: |
          # Push all new tags
          git push origin --tags

  summary:
    needs: [detect-changes, create-tags]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.detect-changes.outputs.core-changed }}" == "true" ]]; then
            echo "✅ **flutter_fixtures_core** v${{ needs.detect-changes.outputs.core-version }} - Tagged for release" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **flutter_fixtures_core** v${{ needs.detect-changes.outputs.core-version }} - No changes" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.detect-changes.outputs.dio-changed }}" == "true" ]]; then
            echo "✅ **flutter_fixtures_dio** v${{ needs.detect-changes.outputs.dio-version }} - Tagged for release" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **flutter_fixtures_dio** v${{ needs.detect-changes.outputs.dio-version }} - No changes" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.detect-changes.outputs.ui-changed }}" == "true" ]]; then
            echo "✅ **flutter_fixtures_ui** v${{ needs.detect-changes.outputs.ui-version }} - Tagged for release" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **flutter_fixtures_ui** v${{ needs.detect-changes.outputs.ui-version }} - No changes" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.detect-changes.outputs.main-changed }}" == "true" ]]; then
            echo "✅ **flutter_fixtures** v${{ needs.detect-changes.outputs.main-version }} - Tagged for release" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **flutter_fixtures** v${{ needs.detect-changes.outputs.main-version }} - No changes" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tags created will automatically trigger the publish workflow." >> $GITHUB_STEP_SUMMARY
